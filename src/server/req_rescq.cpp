/*
*         OpenPBS (Portable Batch System) v2.3 Software License
*
* Copyright (c) 1999-2000 Veridian Information Solutions, Inc.
* All rights reserved.
*
* ---------------------------------------------------------------------------
* For a license to use or redistribute the OpenPBS software under conditions
* other than those described below, or to purchase support for this software,
* please contact Veridian Systems, PBS Products Department ("Licensor") at:
*
*    www.OpenPBS.org  +1 650 967-4675                  sales@OpenPBS.org
*                        877 902-4PBS (US toll-free)
* ---------------------------------------------------------------------------
*
* This license covers use of the OpenPBS v2.3 software (the "Software") at
* your site or location, and, for certain users, redistribution of the
* Software to other sites and locations.  Use and redistribution of
* OpenPBS v2.3 in source and binary forms, with or without modification,
* are permitted provided that all of the following conditions are met.
* After December 31, 2001, only conditions 3-6 must be met:
*
* 1. Commercial and/or non-commercial use of the Software is permitted
*    provided a current software registration is on file at www.OpenPBS.org.
*    If use of this software contributes to a publication, product, or
*    service, proper attribution must be given; see www.OpenPBS.org/credit.html
*
* 2. Redistribution in any form is only permitted for non-commercial,
*    non-profit purposes.  There can be no charge for the Software or any
*    software incorporating the Software.  Further, there can be no
*    expectation of revenue generated as a consequence of redistributing
*    the Software.
*
* 3. Any Redistribution of source code must retain the above copyright notice
*    and the acknowledgment contained in paragraph 6, this list of conditions
*    and the disclaimer contained in paragraph 7.
*
* 4. Any Redistribution in binary form must reproduce the above copyright
*    notice and the acknowledgment contained in paragraph 6, this list of
*    conditions and the disclaimer contained in paragraph 7 in the
*    documentation and/or other materials provided with the distribution.
*
* 5. Redistributions in any form must be accompanied by information on how to
*    obtain complete source code for the OpenPBS software and any
*    modifications and/or additions to the OpenPBS software.  The source code
*    must either be included in the distribution or be available for no more
*    than the cost of distribution plus a nominal fee, and all modifications
*    and additions to the Software must be freely redistributable by any party
*    (including Licensor) without restriction.
*
* 6. All advertising materials mentioning features or use of the Software must
*    display the following acknowledgment:
*
*     "This product includes software developed by NASA Ames Research Center,
*     Lawrence Livermore National Laboratory, and Veridian Information
*     Solutions, Inc.
*     Visit www.OpenPBS.org for OpenPBS software support,
*     products, and information."
*
* 7. DISCLAIMER OF WARRANTY
*
* THIS SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND. ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT
* ARE EXPRESSLY DISCLAIMED.
*
* IN NO EVENT SHALL VERIDIAN CORPORATION, ITS AFFILIATED COMPANIES, OR THE
* U.S. GOVERNMENT OR ANY OF ITS AGENCIES BE LIABLE FOR ANY DIRECT OR INDIRECT,
* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* This license will be governed by the laws of the Commonwealth of Virginia,
* without reference to its choice of law rules.
*/
/*
 * svr_rescq.c
 *
 * Functions relating to the Resource Query Batch Request.
 *
 * Included funtions are:
 *
 *
 */
#include <pbs_config.h>   /* the master config generated by configure */

#include "libpbs.h"
#include <ctype.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include "server_limits.h"
#include "list_link.h"
#include "attribute.h"
#include "server.h"
#include "credential.h"
#include "batch_request.h"
#include "pbs_error.h"
#include "svrfunc.h"
#include "log.h"
#include "reply_send.h" /* reply_send_svr */

/* Global Data Items: */

resource_t next_resource_tag;

/*
 * req_rescq - Resource Query
 *
 * This responds to a Resource Query request with the
 * amount of the resource(s) available/allocated/reserved/down.
 *
 * Currently only recognizes "nodes"
 */

int req_rescq(
    
    struct batch_request *vp) /* I */

  {
  struct batch_request *preq = (struct batch_request *)vp;
  int                   i;
  char                 *pn;
  char                 *pv;
  int                   rc;

  struct brp_rescq     *preply;

  struct rq_rescq      *prescq = &preq->rq_ind.rq_rescq;

  if (prescq->rq_num < 1)
    {
    req_reject(RM_ERR_BADPARAM, 0, preq, NULL, NULL);
    return(PBSE_NONE);
    }

  preply = &preq->rq_reply.brp_un.brp_rescq;

  preq->rq_reply.brp_choice = BATCH_REPLY_CHOICE_RescQuery;
  preply->brq_number = prescq->rq_num;

  preply->brq_avail = (int *)calloc(prescq->rq_num, sizeof(int));
  preply->brq_alloc = (int *)calloc(prescq->rq_num, sizeof(int));
  preply->brq_resvd = (int *)calloc(prescq->rq_num, sizeof(int));
  preply->brq_down  = (int *)calloc(prescq->rq_num, sizeof(int));

  if ((preply->brq_avail == 0) || (preply->brq_alloc == 0) ||
      (preply->brq_resvd == 0) || (preply->brq_down  == 0))
    {
    req_reject(PBSE_SYSTEM, errno, preq, NULL, NULL);
    return(PBSE_NONE);
    }


  for (i = 0; i < prescq->rq_num; ++i)
    {

    *(preply->brq_resvd + i) = 0;
    *(preply->brq_down + i) = 0;

    pn = *(prescq->rq_list + i);

    while (isspace((int)*pn))
      ++pn;

    pv = pn;

    while (isalnum((int)*pv))
      ++pv;

    if (*pv != '\0')
      *pv++ = '\0';  /* skip delimiter */

    if (strcmp(pn, "nodes") == 0)
      {
      /* check on availability of nodes */

      if ((rc = node_avail(pv, preply->brq_avail + i,
                           preply->brq_alloc + i,
                           preply->brq_resvd + i,
                           preply->brq_down + i)) != 0)
        {
        req_reject(rc, 0, preq, NULL, NULL);
        return(PBSE_NONE);
        }
      }
    else
      {
      req_reject(RM_ERR_BADPARAM, 0, preq, NULL, NULL);
      return(PBSE_NONE);
      }

    }

  reply_send_svr(preq);

  return(PBSE_NONE);
  } /* END req_rescq() */




/*
 * req_rescreserve - Resource reserve
 *
 * Reserve a set of resources (only "nodes" for now)
 */

int req_rescreserve(
    
  struct batch_request *vp) /* I */

  {
  struct batch_request *preq = (struct batch_request *)vp;
  int                   i;
  int                   freeold = 0;

  struct rq_rescq      *prescq = &preq->rq_ind.rq_rescq;
  int                   part = 0;
  char                 *pn;
  char                 *pv;
  int                   rc;
  resource_t            tag;

  if ((preq->rq_perm & (ATR_DFLAG_MGWR | ATR_DFLAG_OPWR)) == 0)
    {
    req_reject(PBSE_PERM, 0, preq, NULL, NULL);
    return(PBSE_NONE);
    }

  if (prescq->rq_num < 1)
    {
    req_reject(RM_ERR_BADPARAM, 0, preq, NULL, NULL);
    return(PBSE_NONE);
    }

  tag = prescq->rq_rhandle;

  if (tag > 0)
    {
    freeold = 1;
    }
  else
    {
    tag = next_resource_tag++;
    }

  for (i = 0; i < prescq->rq_num; ++i)
    {

    pn = *(prescq->rq_list + i);

    while (isspace((int)*pn))
      ++pn;

    pv = pn;

    while (isalnum((int)*pv))
      ++pv;

    if (*pv != '\0')
      *pv++ = '\0';           /* skip delimiter */

    if (strcmp(pn, "nodes") == 0)
      {

      /* If existing (partial) reservation, free it */

      if (freeold == 1)
        node_unreserve(tag);

      /* attempt to reserve some nodes */

      rc = node_reserve(pv, tag);

      if (rc < 0)
        {
        req_reject(rc, 0, preq, NULL, NULL);
        return(PBSE_NONE);

        }
      else if (rc == 0)
        part = 1;

      continue;
      }
    else
      {
      req_reject(PBSE_RMUNKNOWN, 0, preq, NULL, NULL);
      return(PBSE_NONE);
      }
    }

  if (part)
    preq->rq_reply.brp_code = PBSE_RMPART;
  else
    preq->rq_reply.brp_code = 0;

  preq->rq_reply.brp_auxcode = tag;

  reply_send_svr(preq);

  return(PBSE_NONE);
  } /* END req_rescreserve() */




/*
 * req_rescfree - Free a reserved set of resources
 */

int req_rescfree(
    
   struct batch_request *vp) /* I */

  {
  struct batch_request *preq = (struct batch_request *)vp;
  if ((preq->rq_perm & (ATR_DFLAG_MGWR | ATR_DFLAG_OPWR)) == 0)
    {
    req_reject(PBSE_PERM, 0, preq, NULL, NULL);
    return(PBSE_NONE);
    }

  node_unreserve(preq->rq_ind.rq_rescq.rq_rhandle);

  reply_ack(preq);

  return(PBSE_NONE);
  } /* END req_rescfree() */

