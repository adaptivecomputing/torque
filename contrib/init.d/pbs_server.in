#!/bin/sh
#
# pbs_server	This script will start and stop the PBS Server
#
# chkconfig: 345 95 05
# description: PBS is a versatile batch system for SMPs and clusters
#
# Source the library functions
test -f /etc/rc.d/init.d/functions && . /etc/rc.d/init.d/functions

# customize these to match your settings
SBIN_PATH=@sbindir@
BIN_PATH=@bindir@
PBS_DAEMON=$SBIN_PATH/pbs_server
PBS_HOME=@PBS_HOME@
PBS_ARGS=""
PBS_SERVERDB="$PBS_HOME/server_priv/serverdb"

SUBSYS_LOCK="/var/lock/subsys/pbs_server"

SERVER_LOCK="$PBS_HOME/server_priv/server.lock"

pidof_pbs_server() {
	local lockfile_info parent_server_pid fd fd_info

	# This function will echo the PID of the master pbs_server process if such
	# a process is running and then return 0. Otherwise it will echo nothing
	# and return 1.

	lockfile_info=`stat -Lc "%d:%i" $SERVER_LOCK 2>/dev/null`
	if [ $? -ne 0 ]; then
		return 1
	fi

	# now we are sure the $SERVER_LOCK file exists
	parent_server_pid=`cat $SERVER_LOCK 2>/dev/null`
	pidof pbs_server | egrep -e "(^| )${parent_server_pid}( |$)" >/dev/null 2>/dev/null
	if [ $? -ne 0 ]; then
		return 1
	fi

	# the parent pbs_server should have a lock on the $SERVER_LOCK file, this is
	# typically acquired early in the pbs_server process, so this loop typically
	# stops at the sixth open file.
	for fd in `ls /proc/${parent_server_pid}/fd/ | sort -n`; do
		fd_info=`stat -Lc "%d:%i" /proc/${parent_server_pid}/fd/${fd} 2>/dev/null`
		if [ x${fd_info} == x${lockfile_info} ]; then
			echo $parent_server_pid
			return 0
		fi
	done

	return 1
}

kill_pbs_server() {
	local pid i

	# This function will try to terminate the pbs_server process if such a
	# process is running.
	pid=`pidof_pbs_server`

	if [ $? -ne 0 ]; then
		return 0;
	fi
 
	$BIN_PATH/qterm
	# wait for process to end
	for i in {1..5}; do
		kill -0 $pid &>/dev/null || return 0
		sleep 1
	done

	# waited too long, send SIGTERM
	killproc pbs_server -TERM
	return $?
}

create() {
	local SLEEP

	echo -n "Creating initial TORQUE configuration: "
	if [ -r $PBS_SERVERDB ]; then
		echo "Configuration already exists.  Please remove $PBS_SERVERDB to create a new one."
		exit 1
	fi

	for SLEEP in 2 4 6 8 10 ; do
		$PBS_DAEMON -d $PBS_HOME -t create -f &
		sleep $SLEEP
		$BIN_PATH/qterm
	done
	if [ -r $PBS_SERVERDB ]; then
		success
		RET=0
	else
		failure
		RET=1
	fi
}

start() {
	status pbs_server >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "pbs_server is already running."
		exit 0
	fi
	if [ ! -r $PBS_SERVERDB ]; then
		create
	fi
	echo -n "Starting TORQUE Server: "
	daemon $PBS_DAEMON -d $PBS_HOME $PBS_ARGS
	RET=$?
	[ $RET -eq 0 ] && touch $SUBSYS_LOCK
	echo
}

stop() {
	local pid

	# check if pbs_server is running
	pid=`pidof_pbs_server`
	[ $? -ne 0 ] && echo -n "pbs_server already stopped" && success && echo && exit 0

	echo -n "Shutting down TORQUE Server: "
	kill_pbs_server
	RET=$?
	[ $RET -eq 0 ] && success "shutdown" || failure "shutdown"
	echo
	rm -f $SUBSYS_LOCK
}

reload() {
	echo -n "Reloading pbs_server: "
	killproc pbs_server -HUP
	RET=$?
	echo
}

if [ -f /etc/sysconfig/pbs_server ]; then
   . /etc/sysconfig/pbs_server
fi

# let see how we were called
case "$1" in
	start) 
		start
		;;
	stop)
		stop
		;;
	status)
		status pbs_server
		RET=$?
		;;
	restart)
		$0 stop
		$0 start
		;;
	condrestart)
		status pbs_server || exit 0
		$0 restart
		;;
	reload)
		reload
		;;
	create)
		create
		;;
	*)
		echo "Usage: pbs_server {start|stop|restart|status|reload|create}"
		exit 1
esac
exit $RET
